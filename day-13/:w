use anyhow::{anyhow, Result};
use std::str::FromStr;

pub struct Paper {
    pattern: Vec<Vec<u8>>,
}

impl FromStr for CaveSystem {
    type Err = anyhow::Error;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        fn to_tup (s: &str) -> Result<(u32, u32)> {
            let as_vec = s.split(",").collect::<Vec<_>>();
            if as_vec.len() != 2 {
                return Err(anyhow!("invalid input, expected comma separated values"));
            }
            Ok(as_vec[0].parse::<u32>()?,as_vec[1].parse::<u32>()?))
        }
        if s.lines().map(|s| to_tup(s)).any(|o| o.is_err()) {
            return Err(anyhow!("Invalid Input"));
        }
        let max_x = s.lines().map(|s| to_tup(s).unwrap().1).max() 
        Ok(cave_system)
    }
}

fn main() {
    println!("Hello, world!");
}
