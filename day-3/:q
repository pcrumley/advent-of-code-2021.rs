use anyhow::{anyhow, Result};

pub struct Diagnostics {
    gamma: Vec<u8>,
    epsilon: Vec<u8>,
}

impl Diagnostics {
    pub fn power_comsumption(&self) -> u32 {
    }

    fn to_number(bit_vec:  &[u8]) -> u32 {
        //assuming bits are in little_endian
        bit_vec.iter().enumerate().fold(0, |acc, &(bit, place)| if bit > 1 { Err(anyhow!(
    }

  pub fn new(data: &str) -> Result<Diagnostics> {
    let mut data_iter = data.lines().peekable();
    let mut acc = match data_iter.peek() {
        Some(x) => vec![0; x.len()],
        None => return Err(anyhow!("Data must contain one line")),
    };
    let mut len = 0;
    for line in data_iter {
        len += 1;
        for (bit_acc, c) in acc.iter_mut().zip(line.chars()) {
            *bit_acc += match c {
                '1' => 1,
                '0' => 0,
                _ => return Err(anyhow!("input must only contain 1 or 0")),
            }
        }
    }
    if len % 2 == 0 {
        return Err(anyhow!("Input value must be even"));
    }
    Ok(acc
        .iter()
        .map(|o| if o.cmp(&(len / 2)).is_gt() { 1 } else { 0 })
        .collect())
}
}

fn main() -> Result<()> {
    let test_data = include_str!("test.txt");
    Ok(())
}
